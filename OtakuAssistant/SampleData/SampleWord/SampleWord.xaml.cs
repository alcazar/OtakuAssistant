//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Blend.SampleData.SampleWord
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class SampleWord { }
#else

    public class SampleWord : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public SampleWord()
        {
            try
            {
                Uri resourceUri = new Uri("ms-appx:/SampleData/SampleWord/SampleWord.xaml", UriKind.RelativeOrAbsolute);
                Windows.UI.Xaml.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private Words _Words = new Words();

        public Words Words
        {
            get
            {
                return this._Words;
            }
        }
    }

    public class Words : System.Collections.ObjectModel.ObservableCollection<WordsItem>
    { 
    }

    public class WordsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private Meanings _Meanings = new Meanings();

        public Meanings Meanings
        {
            get
            {
                return this._Meanings;
            }
        }

        private string _Hanzi = string.Empty;

        public string Hanzi
        {
            get
            {
                return this._Hanzi;
            }

            set
            {
                if (this._Hanzi != value)
                {
                    this._Hanzi = value;
                    this.OnPropertyChanged("Hanzi");
                }
            }
        }

        private string _Traditional = string.Empty;

        public string Traditional
        {
            get
            {
                return this._Traditional;
            }

            set
            {
                if (this._Traditional != value)
                {
                    this._Traditional = value;
                    this.OnPropertyChanged("Traditional");
                }
            }
        }

        private string _ThumbTranslation = string.Empty;

        public string ThumbTranslation
        {
            get
            {
                return this._ThumbTranslation;
            }

            set
            {
                if (this._ThumbTranslation != value)
                {
                    this._ThumbTranslation = value;
                    this.OnPropertyChanged("ThumbTranslation");
                }
            }
        }

        private string _ThumbPinyin = string.Empty;

        public string ThumbPinyin
        {
            get
            {
                return this._ThumbPinyin;
            }

            set
            {
                if (this._ThumbPinyin != value)
                {
                    this._ThumbPinyin = value;
                    this.OnPropertyChanged("ThumbPinyin");
                }
            }
        }
    }

    public class Meanings : System.Collections.ObjectModel.ObservableCollection<MeaningsItem>
    { 
    }

    public class MeaningsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private Pinyins _Pinyins = new Pinyins();

        public Pinyins Pinyins
        {
            get
            {
                return this._Pinyins;
            }
        }

        private Translations _Translations = new Translations();

        public Translations Translations
        {
            get
            {
                return this._Translations;
            }
        }
    }

    public class Pinyins : System.Collections.ObjectModel.ObservableCollection<PinyinsItem>
    { 
    }

    public class PinyinsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _Value = string.Empty;

        public string Value
        {
            get
            {
                return this._Value;
            }

            set
            {
                if (this._Value != value)
                {
                    this._Value = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
    }

    public class Translations : System.Collections.ObjectModel.ObservableCollection<TranslationsItem>
    { 
    }

    public class TranslationsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _Value = string.Empty;

        public string Value
        {
            get
            {
                return this._Value;
            }

            set
            {
                if (this._Value != value)
                {
                    this._Value = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
    }
#endif
}
